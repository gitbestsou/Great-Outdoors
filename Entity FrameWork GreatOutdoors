using System;
using System.Collections.Generic;
using Capgemini.GreatOutdoors.Contracts.DALContracts;
using Capgemini.GreatOutdoors.Exceptions;
using Capgemini.GreatOutdoors.Helpers;
using GreatOutdoors.Entities;

namespace Capgemini.GreatOutdoors.DataAccessLayer
{
    /// <summary>
    /// Contains data access layer methods for inserting, updating, deleting admins from Admins collection.
    /// </summary>
    public class AdminDAL : AdminDALBase, IDisposable
    {

        TeamAEntities entities = new TeamAEntities();

        /// <summary>
        /// Constructor for AdminDAL
        /// </summary>
        public AdminDAL()
        {
           
            //Serialize();
            //Deserialize();
        }


        /// <summary>
        /// Addd admin.
        /// </summary>
        /// <param name="addAdmin">Adding Admin to database.</param>
        /// <returns>Returns Admin object.</returns>
        public override (Guid, bool) AddAdminDAL(Admin addAdmin)
        {
            bool adminAdded = false;
            try
            {
                //Find Admin based on searchAdminID
                Guid newAdminID = Guid.NewGuid();
                addAdmin.CreationDateTime = DateTime.Now;
                addAdmin.LastModifiedDateTime = DateTime.Now;
                entities.AddAdmin(newAdminID,addAdmin.AdminName,addAdmin.Email,addAdmin.Password,addAdmin.CreationDateTime,addAdmin.LastModifiedDateTime);
                entities.SaveChanges();
                adminAdded = true;
            }
            catch (GreatOutdoorsException)
            {
                throw;
            }
            return (addAdmin.AdminID, adminAdded);
        }

        /// <summary>
        /// Gets admin based on AdminID.
        /// </summary>
        /// <param name="searchAdminID">Represents AdminID to search.</param>
        /// <returns>Returns Admin object.</returns>
        public override Admin GetAdminByAdminIDDAL(Guid searchAdminID)
        {
            Admin matchingAdmin = null;
            try
            {
                //Find Admin based on searchAdminID
                matchingAdmin = entities.Admins.Find(searchAdminID);

                if(matchingAdmin == null)
                {
                    //exception thrown
                    throw new GreatOutdoorsException("Invalid AdminID");
                }
            }
            catch (GreatOutdoorsException)
            {
                throw;
            }
            return matchingAdmin;
        }

        /// <summary>
        /// Gets admin based on Password.
        /// </summary>
        /// <param name="email">Represents Admin's Email Address.</param>
        /// <param name="password">Represents Admin's Password.</param>
        /// <returns>Returns Admin object.</returns>
        public override Admin GetAdminByEmailAndPasswordDAL(string email, string password)
        {
            Admin matchingAdmin = null;
            try
            {
                //Find Admin based on Email and Password
                matchingAdmin = entities.Admins.Find(email, password);

                if (matchingAdmin == null)
                {
                    //exception thrown
                    throw new GreatOutdoorsException("Incorrect Email and Password");
                }
            }
            catch (GreatOutdoorsException)
            {
                throw;
            }
            return matchingAdmin;
        }

        /// <summary>
        /// Updates admin based on AdminID.
        /// </summary>
        /// <param name="updateAdmin">Represents Admin details including AdminID, AdminName etc.</param>
        /// <returns>Determinates whether the existing admin is updated.</returns>
        public override (Guid,bool) UpdateAdminDAL(Admin updateAdmin)
        {
            bool adminUpdated = false;
            Admin matchingAdmin = null;
            try
            {
                //Find Admin based on AdminID
                matchingAdmin = entities.Admins.Find(updateAdmin.AdminID); ;

                if (matchingAdmin != null)
                {
                    //Update admin details
                    matchingAdmin.AdminName = updateAdmin.AdminName;
                    matchingAdmin.Email = updateAdmin.Email;

                    //ReflectionHelpers.CopyProperties(updateAdmin, matchingAdmin, new List<string>() { "AdminName", "Email" });

                    matchingAdmin.LastModifiedDateTime = DateTime.Now;
                    entities.SaveChanges();
                    adminUpdated = true;
                }
            }
            catch (GreatOutdoorsException)
            {
                throw;
            }
            return (matchingAdmin.AdminID, adminUpdated);
        }

        /// <summary>
        /// Updates admin's password based on AdminID.
        /// </summary>
        /// <param name="updateAdmin">Represents Admin details including AdminID, Password.</param>
        /// <returns>Determinates whether the existing admin's password is updated.</returns>
        public override (Guid,bool) UpdateAdminPasswordDAL(Admin updateAdmin)
        {
            bool passwordUpdated = false;
            Admin matchingAdmin = null;
            try
            {
                //Find Admin based on AdminID
                matchingAdmin = entities.Admins.Find(updateAdmin.AdminID);

                if (matchingAdmin != null)
                {
                    //Update admin details
                    matchingAdmin.Password = updateAdmin.Password;

                    //ReflectionHelpers.CopyProperties(updateAdmin, matchingAdmin, new List<string>() { "Password" });
                    matchingAdmin.LastModifiedDateTime = DateTime.Now;
                    entities.SaveChanges();
                    passwordUpdated = true;
                }
            }
            catch (GreatOutdoorsException)
            {
                throw;
            }
            return (matchingAdmin.AdminID, passwordUpdated);
        }

        /// <summary>
        /// Clears unmanaged resources such as db connections or file streams.
        /// </summary>
        public void Dispose()
        {
            //No unmanaged resources currently
            entities.Dispose();
        }
    }
}
